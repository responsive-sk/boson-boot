#!/usr/bin/env php
<?php
/**
 * Emergency Header Fix for Production
 * Immediate fix for malformed headers in production environment
 * 
 * Usage: ./bin/emergency-header-fix
 */

echo "üö® Emergency Header Fix for Production\n";
echo "=====================================\n\n";

// Analyze the hex pattern
$hexPattern = '\xfd\xe0J\xc7\xefou.\x7fFC\xccd';
echo "üîç Analyzing error pattern: $hexPattern\n";
echo "This pattern suggests:\n";
echo "  - Possible compression corruption\n";
echo "  - Binary data in output stream\n";
echo "  - PHP extension interference\n";
echo "  - Memory corruption\n\n";

// Create emergency index.php
echo "1Ô∏è‚É£  Creating emergency index.php...\n";

$emergencyIndex = '<?php
/**
 * EMERGENCY PRODUCTION INDEX
 * Minimal, bulletproof entry point
 */

// Disable ALL output before headers
while (ob_get_level()) {
    ob_end_clean();
}

// Start fresh output buffer
ob_start();

// Disable ALL problematic extensions and settings
error_reporting(0);
ini_set("display_errors", 0);
ini_set("log_errors", 1);
ini_set("error_log", "../storage/logs/emergency.log");

// Disable compression that might cause corruption
ini_set("zlib.output_compression", 0);
ini_set("output_buffering", 0);

// Disable Xdebug completely
if (extension_loaded("xdebug")) {
    ini_set("xdebug.mode", "off");
    ini_set("xdebug.start_with_request", "no");
}

// Memory limits for shared hosting
ini_set("memory_limit", "64M");
ini_set("max_execution_time", "15");

// Clean headers - send immediately
header("Content-Type: text/html; charset=UTF-8", true);
header("Cache-Control: no-cache, must-revalidate", true);
header("Pragma: no-cache", true);

// Flush headers immediately
if (function_exists("fastcgi_finish_request")) {
    // For PHP-FPM
    ob_end_flush();
    flush();
} else {
    // For other SAPIs
    ob_end_flush();
    flush();
}

// Start new buffer for content
ob_start();

try {
    // Minimal autoloader check
    $autoloader = __DIR__ . "/../vendor/autoload.php";
    if (!file_exists($autoloader)) {
        throw new Exception("Autoloader not found");
    }
    
    require_once $autoloader;
    
    // Minimal application bootstrap
    use Boson\Shared\Infrastructure\Http\Kernel;
    
    $kernel = new Kernel();
    $response = $kernel->handle();
    
    // Clean output
    echo $response;
    
} catch (Throwable $e) {
    // Emergency fallback page
    ob_end_clean();
    
    echo "<!DOCTYPE html>
<html>
<head>
    <title>Boson PHP - Maintenance</title>
    <meta charset=\"utf-8\">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; }
        .error { color: #d32f2f; background: #ffebee; padding: 15px; border-radius: 4px; margin: 20px 0; }
        .info { color: #1976d2; background: #e3f2fd; padding: 15px; border-radius: 4px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class=\"container\">
        <h1>üîß Boson PHP - Temporary Maintenance</h1>
        <div class=\"info\">
            <strong>We are currently performing maintenance on this application.</strong><br>
            Please check back in a few minutes.
        </div>
        <div class=\"error\">
            <strong>Technical Details:</strong><br>
            " . htmlspecialchars($e->getMessage()) . "
        </div>
        <p>If you are the administrator:</p>
        <ul>
            <li>Check server error logs</li>
            <li>Verify file permissions</li>
            <li>Check database connectivity</li>
            <li>Review .env configuration</li>
        </ul>
        <hr>
        <small>Error logged at: " . date("Y-m-d H:i:s") . "</small>
    </div>
</body>
</html>";
    
    // Log the error
    error_log("Emergency fallback triggered: " . $e->getMessage());
}

// Final flush
if (ob_get_level()) {
    ob_end_flush();
}
?>';

// Backup current index.php
$indexPath = 'public/index.php';
$buildIndexPath = 'build/public_html/index.php';

if (file_exists($indexPath)) {
    copy($indexPath, $indexPath . '.backup.' . date('Y-m-d-H-i-s'));
    echo "  ‚úÖ Backed up current index.php\n";
}

if (file_exists($buildIndexPath)) {
    copy($buildIndexPath, $buildIndexPath . '.backup.' . date('Y-m-d-H-i-s'));
    echo "  ‚úÖ Backed up build index.php\n";
}

// Apply emergency fix
file_put_contents($indexPath, $emergencyIndex);
if (file_exists('build/public_html/')) {
    file_put_contents($buildIndexPath, $emergencyIndex);
}

echo "  ‚úÖ Emergency index.php deployed\n\n";

// Create emergency .htaccess
echo "2Ô∏è‚É£  Creating emergency .htaccess...\n";

$emergencyHtaccess = '# EMERGENCY HTACCESS - Minimal configuration
RewriteEngine On

# Disable compression that might cause corruption
php_flag zlib.output_compression Off
php_flag output_buffering Off

# Disable problematic extensions
php_flag xdebug.mode off
php_flag display_errors Off
php_flag log_errors On

# Basic security
php_value disable_functions "exec,passthru,shell_exec,system"

# Memory limits
php_value memory_limit 64M
php_value max_execution_time 15

# Basic routing
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php [QSA,L]

# Protect sensitive files
<Files ".env">
    Order allow,deny
    Deny from all
</Files>
';

file_put_contents('public/.htaccess', $emergencyHtaccess);
if (file_exists('build/public_html/')) {
    file_put_contents('build/public_html/.htaccess', $emergencyHtaccess);
}

echo "  ‚úÖ Emergency .htaccess deployed\n\n";

// Create diagnostic script
echo "3Ô∏è‚É£  Creating diagnostic script...\n";

$diagnosticScript = '<?php
/**
 * Production Diagnostic Script
 * Run this to diagnose production issues
 */

header("Content-Type: text/plain");

echo "üîç Production Diagnostic Report\n";
echo "==============================\n\n";

echo "Server Information:\n";
echo "PHP Version: " . PHP_VERSION . "\n";
echo "Server Software: " . ($_SERVER["SERVER_SOFTWARE"] ?? "Unknown") . "\n";
echo "Document Root: " . ($_SERVER["DOCUMENT_ROOT"] ?? "Unknown") . "\n";
echo "Script Name: " . ($_SERVER["SCRIPT_NAME"] ?? "Unknown") . "\n\n";

echo "PHP Configuration:\n";
echo "Memory Limit: " . ini_get("memory_limit") . "\n";
echo "Max Execution Time: " . ini_get("max_execution_time") . "\n";
echo "Output Buffering: " . (ini_get("output_buffering") ? "ON" : "OFF") . "\n";
echo "Zlib Compression: " . (ini_get("zlib.output_compression") ? "ON" : "OFF") . "\n";
echo "Display Errors: " . (ini_get("display_errors") ? "ON" : "OFF") . "\n\n";

echo "Loaded Extensions:\n";
$extensions = get_loaded_extensions();
foreach (["xdebug", "zlib", "opcache", "apcu"] as $ext) {
    echo "$ext: " . (in_array($ext, $extensions) ? "LOADED" : "NOT LOADED") . "\n";
}

echo "\nFile System:\n";
echo "Current Directory: " . getcwd() . "\n";
echo "Autoloader: " . (file_exists("../vendor/autoload.php") ? "EXISTS" : "MISSING") . "\n";
echo ".env: " . (file_exists("../.env") ? "EXISTS" : "MISSING") . "\n";

echo "\nOutput Buffer Status:\n";
echo "Buffer Level: " . ob_get_level() . "\n";
echo "Buffer Length: " . ob_get_length() . "\n";

echo "\nMemory Usage:\n";
echo "Current: " . round(memory_get_usage(true) / 1024 / 1024, 2) . " MB\n";
echo "Peak: " . round(memory_get_peak_usage(true) / 1024 / 1024, 2) . " MB\n";

echo "\n‚úÖ Diagnostic completed\n";
?>';

file_put_contents('public/diagnostic.php', $diagnosticScript);
echo "  ‚úÖ Diagnostic script created at /diagnostic.php\n\n";

echo "üéâ Emergency fix deployed!\n\n";

echo "üìã Next Steps:\n";
echo "1. Test your site immediately\n";
echo "2. Check /diagnostic.php for detailed info\n";
echo "3. Monitor error logs: storage/logs/emergency.log\n";
echo "4. If working, gradually restore features\n\n";

echo "üîß If still not working:\n";
echo "1. Check server error logs\n";
echo "2. Contact hosting provider\n";
echo "3. Verify PHP version compatibility\n";
echo "4. Check file permissions\n\n";

echo "üìû Emergency contacts:\n";
echo "- Check hosting control panel\n";
echo "- Review server error logs\n";
echo "- Test with minimal PHP script\n\n";

echo "‚ú® Emergency fix complete! ‚ú®\n";
